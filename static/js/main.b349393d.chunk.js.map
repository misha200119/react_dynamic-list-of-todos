{"version":3,"sources":["enums/FilterToDosBy.ts","components/TodoList/TodoList.tsx","api/api.ts","components/CurrentUser/CurrentUser.tsx","App.tsx","index.tsx"],"names":["FilterToDosBy","TodoList","React","memo","selectedUserId","setSelectedUserId","toDos","useState","filterTitlePattern","setFilterTitlePattern","visibleTodos","setVisibleTodos","all","filterCompletedToDos","setFilterCompletedToDos","isRandomized","setIsRandomized","filter","useCallback","pattern","toLowerCase","toDo","includePattern","title","includes","Number","completed","active","randomize","arr","i","length","j","Math","floor","random","useEffect","filteredArr","className","type","value","onChange","target","classNames","onClick","prevValue","map","checked","readOnly","userId","id","baseURL","getToDosFromAPI","a","fetch","response","json","getUserByIdFromServer","CurrentUser","clearSelectedUserId","isLoadingError","setLoadingError","currentUser","setCurrentUser","getUser","user","name","email","phone","App","setToDos","setIsLoadingError","getToDos","toDosFromServer","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.b349393d.chunk.js","sourcesContent":["export enum FilterToDosBy {\n  all,\n  active,\n  completed,\n}\n","/* eslint-disable jsx-a11y/control-has-associated-label */\nimport React, { useCallback, useEffect, useState } from 'react';\nimport classNames from 'classnames';\nimport { FilterToDosBy } from '../../enums/FilterToDosBy';\nimport { ToDo } from '../../types/ToDo';\nimport './TodoList.scss';\n\ntype Props = {\n  selectedUserId: number,\n  setSelectedUserId: React.Dispatch<React.SetStateAction<number>>,\n  toDos: Array<ToDo>,\n};\n\nexport const TodoList: React.FC<Props> = React.memo(({\n  selectedUserId,\n  setSelectedUserId,\n  toDos,\n}) => {\n  const [filterTitlePattern, setFilterTitlePattern] = useState('');\n  const [visibleTodos, setVisibleTodos] = useState(toDos);\n  const [filterCompletedToDos, setFilterCompletedToDos]\n    = useState(FilterToDosBy.all);\n  const [isRandomized, setIsRandomized] = useState(false);\n\n  const filter = useCallback(() => {\n    const pattern = filterTitlePattern.toLowerCase();\n\n    return (toDos.filter(toDo => {\n      const title = toDo.title.toLowerCase();\n      const includePattern = title.includes(pattern);\n\n      switch (Number(filterCompletedToDos)) {\n        case FilterToDosBy.all:\n          return includePattern;\n\n        case FilterToDosBy.completed:\n          return includePattern && toDo.completed === true;\n\n        case FilterToDosBy.active:\n          return includePattern && toDo.completed === false;\n\n        default:\n          return toDo;\n      }\n    }));\n  }, [filterTitlePattern, toDos, filterCompletedToDos]);\n\n  const randomize = useCallback((arr) => {\n    if (isRandomized) {\n      for (let i = arr.length - 1; i > 0; i -= 1) {\n        const j = Math.floor(Math.random() * (i + 1));\n\n        // eslint-disable-next-line no-param-reassign\n        [arr[i], arr[j]] = [arr[j], arr[i]];\n      }\n    }\n  }, [filterTitlePattern,\n    toDos,\n    filterCompletedToDos,\n    isRandomized]);\n\n  useEffect(() => {\n    const filteredArr = filter();\n\n    randomize(filteredArr);\n\n    setVisibleTodos(filteredArr);\n  }, [filterTitlePattern, toDos, filterCompletedToDos, isRandomized]);\n\n  return (\n    <div className=\"TodoList\">\n      <h2>Todos:</h2>\n\n      <div className=\"TodoList__Filter-options\">\n        <label>\n          Title contain:\n          <input\n            type=\"text\"\n            value={filterTitlePattern}\n            onChange={({ target }) => {\n              setFilterTitlePattern(target.value);\n            }}\n          />\n        </label>\n\n        <label>\n          Show only:\n          <select\n            value={filterCompletedToDos}\n            onChange={({ target }) => {\n              setFilterCompletedToDos(target.value as unknown as FilterToDosBy);\n            }}\n          >\n            <option value={FilterToDosBy.all}>\n              All\n            </option>\n\n            <option value={FilterToDosBy.active}>\n              Active\n            </option>\n\n            <option value={FilterToDosBy.completed}>\n              Completed\n            </option>\n          </select>\n        </label>\n\n        <button\n          className={classNames(\n            'button',\n            'TodoList__user-button',\n            {\n              'TodoList__user-button--selected':\n                isRandomized,\n            },\n          )}\n          type=\"button\"\n          onClick={() => {\n            setIsRandomized((prevValue) => !prevValue);\n          }}\n        >\n          Randomize\n        </button>\n      </div>\n\n      <div className=\"TodoList__list-container\">\n        <ul className=\"TodoList__list\">\n          {visibleTodos.map(toDo => (\n            <li\n              className={classNames(\n                'TodoList__item',\n                {\n                  'TodoList__item--unchecked': !toDo.completed,\n                  'TodoList__item--checked': toDo.completed,\n                },\n              )}\n              key={toDo.id}\n            >\n              <label>\n                <input\n                  type=\"checkbox\"\n                  checked={toDo.completed}\n                  readOnly\n                />\n                <p>{toDo.title}</p>\n              </label>\n\n              <button\n                className={classNames(\n                  'button',\n                  'TodoList__user-button',\n                  {\n                    'TodoList__user-button--selected':\n                      toDo.userId === selectedUserId,\n                  },\n                )}\n                type=\"button\"\n                onClick={() => {\n                  setSelectedUserId(toDo.userId);\n                }}\n              >\n                User&nbsp;#\n                {toDo.userId}\n              </button>\n            </li>\n          ))}\n        </ul>\n      </div>\n    </div>\n  );\n});\n","import { ToDo } from '../types/ToDo';\nimport { User } from '../types/User';\n\nconst baseURL = 'https://mate.academy/students-api';\n\nexport const getToDosFromAPI = async (): Promise<Array<ToDo>> => {\n  const response = await fetch(`${baseURL}/todos`);\n\n  return response.json();\n};\n\nexport const getUserByIdFromServer = async (id: number): Promise<User> => {\n  const response = await fetch(`${baseURL}/users/${id}`);\n\n  return response.json();\n};\n","import React, { useCallback, useEffect, useState } from 'react';\nimport { User } from '../../types/User';\nimport { getUserByIdFromServer } from '../../api/api';\nimport './CurrentUser.scss';\n\ntype Props = {\n  selectedUserId: number;\n  clearSelectedUserId: () => void;\n};\n\nexport const CurrentUser: React.FC<Props>\n= React.memo(({ selectedUserId, clearSelectedUserId }) => {\n  const [isLoadingError, setLoadingError] = useState(false);\n  const [currentUser, setCurrentUser] = useState<User | null>(null);\n\n  const getUser = useCallback(async () => {\n    try {\n      const user = await getUserByIdFromServer(selectedUserId);\n\n      setLoadingError(false);\n      setCurrentUser(user);\n    } catch {\n      setLoadingError(true);\n      setCurrentUser(null);\n    }\n  }, [selectedUserId]);\n\n  useEffect(() => {\n    getUser();\n  }, [selectedUserId]);\n\n  return (\n    <>\n      { !isLoadingError && currentUser ? (\n        <div className=\"CurrentUser\">\n          <h2 className=\"CurrentUser__title\">\n            <span>\n              Selected user:\n              {currentUser.id}\n            </span>\n          </h2>\n\n          <h3 className=\"CurrentUser__name\">\n            {currentUser.name}\n          </h3>\n\n          <p className=\"CurrentUser__email\">\n            {currentUser.email}\n          </p>\n\n          <p className=\"CurrentUser__phone\">\n            {currentUser.phone}\n          </p>\n          <button\n            className=\"CurrentUser__btn-clear\"\n            type=\"button\"\n            onClick={clearSelectedUserId}\n          >\n            Clear\n          </button>\n        </div>\n      )\n        : (\n          <div className=\"CurrentUser\">\n            <h2 className=\"CurrentUser__title\">\n              <span>Loading Error</span>\n            </h2>\n\n            <h3 className=\"CurrentUser__name\">\n              No user data\n            </h3>\n          </div>\n        )}\n    </>\n  );\n});\n","import React, { useCallback, useEffect, useState } from 'react';\nimport { TodoList } from './components/TodoList';\nimport { CurrentUser } from './components/CurrentUser';\nimport { ToDo } from './types/ToDo';\nimport { getToDosFromAPI } from './api/api';\n\nimport './App.scss';\nimport './styles/general.scss';\n\nconst App: React.FC<{}> = () => {\n  const [\n    selectedUserId,\n    setSelectedUserId,\n  ] = useState(0);\n  const [toDos, setToDos] = useState<Array<ToDo>>([]);\n  const [isLoadingError, setIsLoadingError] = useState(false);\n\n  const getToDos = useCallback(async () => {\n    try {\n      const toDosFromServer = await getToDosFromAPI();\n\n      setToDos(toDosFromServer);\n      setIsLoadingError(false);\n    } catch {\n      setToDos([]);\n      setIsLoadingError(true);\n    }\n  }, []);\n\n  const clearSelectedUser = () => {\n    setSelectedUserId(0);\n  };\n\n  useEffect(() => {\n    getToDos();\n  }, []);\n\n  return (\n    <div className=\"App\">\n      <div className=\"App__sidebar\">\n        {!isLoadingError ? (\n          <TodoList\n            toDos={toDos}\n            setSelectedUserId={setSelectedUserId}\n            selectedUserId={selectedUserId}\n          />\n        )\n          : (\n            <>\n              <h2>\n                Loading Error\n              </h2>\n              <h3>\n                No toDos data\n              </h3>\n            </>\n          )}\n      </div>\n\n      <div className=\"App__content\">\n        <div className=\"App__content-container\">\n          {selectedUserId ? (\n            <CurrentUser\n              selectedUserId={selectedUserId}\n              clearSelectedUserId={clearSelectedUser}\n            />\n          ) : 'No user selected'}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","import ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}